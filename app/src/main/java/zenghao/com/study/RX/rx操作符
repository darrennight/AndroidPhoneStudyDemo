defer操作符

defer操作符是直到有订阅者订阅时，才通过Observable的工厂方法创建Observable并执行，
defer操作符能够保证Observable的状态是最新的


timer操作符
//每隔两秒产生一个数字
        Observable.timer(2, 2, TimeUnit.SECONDS).subscribe(new Subscriber<Long>() {
            @Override
            public void onCompleted() {
                System.out.println("Sequence complete.");
            }

            @Override
            public void onError(Throwable e) {
                System.out.println("error:" + e.getMessage());
            }

            @Override
            public void onNext(Long aLong) {
                System.out.println("Next:" + aLong.toString());
            }
        });

interval操作符

range操作符
range操作符是创建一组在从n开始，个数为m的连续数字，比如range(3,10)，就是创建3、4、5…12的一组数字，其流程实例如下：

//产生从3开始，个数为10个的连续数字
        Observable.range(3,10).subscribe(new Subscriber<Integer>() {
            @Override
            public void onCompleted() {
                System.out.println("Sequence complete.");
            }

            @Override
            public void onError(Throwable e) {
                System.out.println("error:" + e.getMessage());
            }

            @Override
            public void onNext(Integer i) {
                System.out.println("Next:" + i.toString());
            }
        });


 repeat/repeatWhen操作符

 repeat操作符是对某一个Observable，重复产生多次结果
 repeatWhen操作符是对某一个Observable，有条件地重新订阅从而产生多次结果

 //连续产生两组(3,4,5)的数字
         Observable.range(3,3).repeat(2).subscribe(new Subscriber<Integer>() {
             @Override
             public void onCompleted() {
                 System.out.println("Sequence complete.");
             }

             @Override
             public void onError(Throwable e) {
                 System.out.println("error:" + e.getMessage());
             }

             @Override
             public void onNext(Integer i) {
                 System.out.println("Next:" + i.toString());
             }
         });

         Next:3
         Next:4
         Next:5
         Next:3
         Next:4
         Next:5

   Observable.just(1,2,3).repeatWhen(new Func1<Observable<? extends Void>, Observable<?>>() {
               @Override
               public Observable<?> call(Observable<? extends Void> observable) {
                   //重复3次
                   return observable.zipWith(Observable.range(1, 3), new Func2<Void, Integer, Integer>() {
                       @Override
                       public Integer call(Void aVoid, Integer integer) {
                           return integer;
                       }
                   }).flatMap(new Func1<Integer, Observable<?>>() {
                       @Override
                       public Observable<?> call(Integer integer) {
                           System.out.println("delay repeat the " + integer + " count");
                           //1秒钟重复一次
                           return Observable.timer(1, TimeUnit.SECONDS);
                       }
                   });
               }
           }).subscribe(new Subscriber<Integer>() {
               @Override
               public void onCompleted() {
                   System.out.println("Sequence complete.");
               }

               @Override
               public void onError(Throwable e) {
                   System.err.println("Error: " + e.getMessage());
               }

               @Override
               public void onNext(Integer value) {
                   System.out.println("Next:" + value);
               }
           });




  buffer操作符
   buffer操作符周期性地收集源Observable产生的结果到列表中，并把这个列表提交给订阅者，订阅者处理后，
   清空buffer列表，同时接收下一次收集的结果并提交给订阅者，周而复始。
   需要注意的是，一旦源Observable在产生结果的过程中出现异常，即使buffer已经存在收集到的结果，
   订阅者也会马上收到这个异常，并结束整个过程。

   //定义邮件内容
           final String[] mails = new String[]{"Here is an email!", "Another email!", "Yet another email!"};
           //每隔1秒就随机发布一封邮件
           Observable<String> endlessMail = Observable.create(new Observable.OnSubscribe<String>() {
               @Override
               public void call(Subscriber<? super String> subscriber) {
                   try {
                       if (subscriber.isUnsubscribed()) return;
                       Random random = new Random();
                       while (true) {
                           String mail = mails[random.nextInt(mails.length)];
                           subscriber.onNext(mail);
                           Thread.sleep(1000);
                       }
                   } catch (Exception ex) {
                       subscriber.onError(ex);
                   }
               }
           }).subscribeOn(Schedulers.io());
           //把上面产生的邮件内容缓存到列表中，并每隔3秒通知订阅者
           endlessMail.buffer(3, TimeUnit.SECONDS).subscribe(new Action1<List<String>>() {
               @Override
               public void call(List<String> list) {

                   System.out.println(String.format("You've got %d new messages!  Here they are!", list.size()));
                   for (int i = 0; i < list.size(); i++)
                       System.out.println("**" + list.get(i).toString());
               }
           });


 flatMap操作符
   flatMap操作符是把Observable产生的结果转换成多个Observable，
   然后把这多个Observable“扁平化”成一个Observable，并依次提交产生的结果给订阅者。
    private Observable<File> listFiles(File f){
            if(f.isDirectory()){
                return Observable.from(f.listFiles()).flatMap(new Func1<File, Observable<File>>() {
                    @Override
                    public Observable<File> call(File file) {
                        return listFiles(f);／／file
                    }
                });
            } else {
                return Observable.just(f);
            }
        }


        @Override
        public void onClick(View v) {
            Observable.just(getApplicationContext().getExternalCacheDir())
                    .flatMap(new Func1<File, Observable<File>>() {
                        @Override
                        public Observable<File> call(File file) {
                            //参数file是just操作符产生的结果，这里判断file是不是目录文件，如果是目录文件，
                            则递归查找其子文件flatMap操作符神奇的地方在于，返回的结果还是一个Observable，
                            而这个Observable其实是包含多个文件的Observable的，输出应该是ExternalCacheDir下的所有文件
                            return listFiles(file);
                        }
                    })
                    .subscribe(new Action1<File>() {
                        @Override
                        public void call(File file) {
                            System.out.println(file.getAbsolutePath());
                        }
                    });

        }

concatMap操作符



switchMap操作符

switchMap操作符与flatMap操作符类似，都是把Observable产生的结果转换成多个Observable，
然后把这多个Observable“扁平化”成一个Observable，并依次提交产生的结果给订阅者。

//flatMap操作符的运行结果
        Observable.just(10, 20, 30).flatMap(new Func1<Integer, Observable<Integer>>() {
            @Override
            public Observable<Integer> call(Integer integer) {
                //10的延迟执行时间为200毫秒、20和30的延迟执行时间为180毫秒
                int delay = 200;
                if (integer > 10)
                    delay = 180;

                return Observable.from(new Integer[]{integer, integer / 2}).delay(delay, TimeUnit.MILLISECONDS);
            }
        }).observeOn(AndroidSchedulers.mainThread()).subscribe(new Action1<Integer>() {
            @Override
            public void call(Integer integer) {
                System.out.println("flatMap Next:" + integer);
            }
        });

        //concatMap操作符的运行结果
        Observable.just(10, 20, 30).concatMap(new Func1<Integer, Observable<Integer>>() {
            @Override
            public Observable<Integer> call(Integer integer) {
                //10的延迟执行时间为200毫秒、20和30的延迟执行时间为180毫秒
                int delay = 200;
                if (integer > 10)
                    delay = 180;

                return Observable.from(new Integer[]{integer, integer / 2}).delay(delay, TimeUnit.MILLISECONDS);
            }
        }).observeOn(AndroidSchedulers.mainThread()).subscribe(new Action1<Integer>() {
            @Override
            public void call(Integer integer) {
                System.out.println("concatMap Next:" + integer);
            }
        });

        //switchMap操作符的运行结果
        Observable.just(10, 20, 30).switchMap(new Func1<Integer, Observable<Integer>>() {
            @Override
            public Observable<Integer> call(Integer integer) {
                //10的延迟执行时间为200毫秒、20和30的延迟执行时间为180毫秒
                int delay = 200;
                if (integer > 10)
                    delay = 180;

                return Observable.from(new Integer[]{integer, integer / 2}).delay(delay, TimeUnit.MILLISECONDS);
            }
        }).observeOn(AndroidSchedulers.mainThread()).subscribe(new Action1<Integer>() {
            @Override
            public void call(Integer integer) {
                System.out.println("switchMap Next:" + integer);
            }
        });
        运行结果如下：
        flatMap Next:20
        flatMap Next:10
        flatMap Next:30
        flatMap Next:15
        flatMap Next:10
        flatMap Next:5

        switchMap Next:30
        switchMap Next:15

        concatMap Next:10
        concatMap Next:5
        concatMap Next:20
        concatMap Next:10
        concatMap Next:30
        concatMap Next:15


 groupBy操作符

 groupBy操作符是对源Observable产生的结果进行分组，形成一个类型为GroupedObservable的结果集，
 GroupedObservable中存在一个方法为getKey()，
 可以通过该方法获取结果集的Key值（类似于HashMap的key)。

 值得注意的是，由于结果集中的GroupedObservable是把分组结果缓存起来，
 如果对每一个GroupedObservable不进行处理（既不订阅执行也不对其进行别的操作符运算），
 就有可能出现内存泄露。因此，如果你对某个GroupedObservable不进行处理，最好是对其使用操作符take(0)处理。

 Observable.interval(1, TimeUnit.SECONDS).take(10).groupBy(new Func1<Long, Long>() {
             @Override
             public Long call(Long value) {
                 //按照key为0,1,2分为3组
                 return value % 3;
             }
         }).subscribe(new Action1<GroupedObservable<Long, Long>>() {
             @Override
             public void call(GroupedObservable<Long, Long> result) {
                 result.subscribe(new Action1<Long>() {
                     @Override
                     public void call(Long value) {
                         System.out.println("key:" + result.getKey() +", value:" + value);
                     }
                 });
             }
         });

        key:0, value:0
        key:1, value:1
        key:2, value:2
        key:0, value:3
        key:1, value:4
        key:2, value:5
        key:0, value:6
        key:1, value:7
        key:2, value:8
        key:0, value:9

  map操作符

  cast操作符

  cast操作符类似于map操作符，不同的地方在于map操作符可以通过自定义规则，把一个值A1变成另一个值A2，
  A1和A2的类型可以一样也可以不一样；而cast操作符主要是做类型转换的，传入参数为类型class，
  如果源Observable产生的结果不能转成指定的class，则会抛出ClassCastException运行时异常。
    Observable.just(1,2,3,4,5,6).cast(Integer.class).subscribe(new Action1<Integer>() {
                @Override
                public void call(Integer value) {
                    System.out.println("next:"+value);
                }
            });

  scan操作符

  scan操作符通过遍历源Observable产生的结果，依次对每一个结果项按照指定规则进行运算，
  计算后的结果作为下一个迭代项参数，每一次迭代项都会把计算结果输出给订阅者。

   Observable.just(1, 2, 3, 4, 5)
       .scan(new Func2<Integer, Integer, Integer>() {
           @Override
           public Integer call(Integer sum, Integer item) {
               //参数sum就是上一次的计算结果
               return sum + item;
           }
       }).subscribe(new Subscriber<Integer>() {
           @Override
           public void onNext(Integer item) {
               System.out.println("Next: " + item);
           }

           @Override
           public void onError(Throwable error) {
               System.err.println("Error: " + error.getMessage());
           }

           @Override
           public void onCompleted() {
               System.out.println("Sequence complete.");
           }
       });

       Next: 1
       Next: 3
       Next: 6
       Next: 10
       Next: 15
       Sequence complete.


 buffer操作符

       //定义邮件内容
               final String[] mails = new String[]{"Here is an email!", "Another email!", "Yet another email!"};
               //每隔1秒就随机发布一封邮件
               Observable<String> endlessMail = Observable.create(new Observable.OnSubscribe<String>() {
                   @Override
                   public void call(Subscriber<? super String> subscriber) {
                       try {
                           if (subscriber.isUnsubscribed()) return;
                           Random random = new Random();
                           while (true) {
                               String mail = mails[random.nextInt(mails.length)];
                               subscriber.onNext(mail);
                               Thread.sleep(1000);
                           }
                       } catch (Exception ex) {
                           subscriber.onError(ex);
                       }
                   }
               }).subscribeOn(Schedulers.io());
               //把上面产生的邮件内容缓存到列表中，并每隔3秒通知订阅者
               endlessMail.buffer(3, TimeUnit.SECONDS).subscribe(new Action1<List<String>>() {
                   @Override
                   public void call(List<String> list) {

                       System.out.println(String.format("You've got %d new messages!  Here they are!", list.size()));
                       for (int i = 0; i < list.size(); i++)
                           System.out.println("**" + list.get(i).toString());
                   }
               });


 window操作符

 window操作符非常类似于buffer操作符，区别在于buffer操作符产生的结果是一个List缓存，
 而window操作符产生的结果是一个Observable，订阅者可以对这个结果Observable重新进行订阅处理。
Observable.interval(1, TimeUnit.SECONDS).take(12)
                .window(3, TimeUnit.SECONDS)
                .subscribe(new Action1<Observable<Long>>() {
                    @Override
                    public void call(Observable<Long> observable) {
                        System.out.println("subdivide begin......");
                        observable.subscribe(new Action1<Long>() {
                            @Override
                            public void call(Long aLong) {
                                System.out.println("Next:" + aLong);
                            }
                        });
                    }
                });


  debounce操作符

  debounce操作符对源Observable每产生一个结果后，如果在规定的间隔时间内没有别的结果产生，则把这个结果提交给订阅者处理，否则忽略该结果。

  值得注意的是，如果源Observable产生的最后一个结果后在规定的时间间隔内调用了onCompleted，那么通过debounce操作符也会把这个结果提交给订阅者。

  Observable.create(new Observable.OnSubscribe<Integer>() {
              @Override
              public void call(Subscriber<? super Integer> subscriber) {
                  if(subscriber.isUnsubscribed()) return;
                  try {
                      //产生结果的间隔时间分别为100、200、300...900毫秒
                      for (int i = 1; i < 10; i++) {
                          subscriber.onNext(i);
                          Thread.sleep(i * 100);
                      }
                      subscriber.onCompleted();
                  }catch(Exception e){
                      subscriber.onError(e);
                  }
              }
          }).subscribeOn(Schedulers.newThread())
            .debounce(400, TimeUnit.MILLISECONDS)  //超时时间为400毫秒
            .subscribe(
                  new Action1<Integer>() {
                      @Override
                      public void call(Integer integer) {
                          System.out.println("Next:" + integer);
                      }
                  }, new Action1<Throwable>() {
                      @Override
                      public void call(Throwable throwable) {
                          System.out.println("Error:" + throwable.getMessage());
                      }
                  }, new Action0() {
                      @Override
                      public void call() {
                          System.out.println("completed!");
                      }
                  });


    distinct操作符

    distinct操作符对源Observable产生的结果进行过滤，把重复的结果过滤掉，只输出不重复的结果给订阅者，非常类似于SQL里的distinct关键字。

Observable.just(1, 2, 1, 1, 2, 3)
          .distinct()
          .subscribe(new Subscriber<Integer>() {
        @Override
        public void onNext(Integer item) {
            System.out.println("Next: " + item);
        }

        @Override
        public void onError(Throwable error) {
            System.err.println("Error: " + error.getMessage());
        }

        @Override
        public void onCompleted() {
            System.out.println("Sequence complete.");
        }
    });




    elementAt操作符

    elementAt操作符在源Observable产生的结果中，仅仅把指定索引的结果提交给订阅者，索引是从0开始的。


    Observable.just(1,2,3,4,5,6).elementAt(2)
              .subscribe(
                    new Action1<Integer>() {
                        @Override
                        public void call(Integer integer) {
                            System.out.println("Next:" + integer);
                        }
                    }, new Action1<Throwable>() {
                        @Override
                        public void call(Throwable throwable) {
                            System.out.println("Error:" + throwable.getMessage());
                        }
                    }, new Action0() {
                        @Override
                        public void call() {
                            System.out.println("completed!");
                        }
                    });



    filter操作符

    filter操作符是对源Observable产生的结果按照指定条件进行过滤，只有满足条件的结果才会提交给订阅者

    Observable.just(1, 2, 3, 4, 5)
              .filter(new Func1<Integer, Boolean>() {
                  @Override
                  public Boolean call(Integer item) {
                    return( item < 4 );
                  }
              }).subscribe(new Subscriber<Integer>() {
            @Override
            public void onNext(Integer item) {
                System.out.println("Next: " + item);
            }

            @Override
            public void onError(Throwable error) {
                System.err.println("Error: " + error.getMessage());
            }

            @Override
            public void onCompleted() {
                System.out.println("Sequence complete.");
            }
        });

        ofType操作符

        Observable.just(1, "hello world", true, 200L, 0.23f)
                  .ofType(Float.class)
                  .subscribe(new Subscriber<Object>() {
                      @Override
                      public void onNext(Object item) {
                          System.out.println("Next: " + item);
                      }

                      @Override
                      public void onError(Throwable error) {
                          System.err.println("Error: " + error.getMessage());
                      }

                      @Override
                      public void onCompleted() {
                          System.out.println("Sequence complete.");
                      }
                  });
                  运行结果如下：
                  Next: 0.23
                  Sequence complete.


take操作符
        take发送前几项
        TakeLast发送后几项
        last发送最后一项
        还有一个操作符叫takeLastBuffer，它和takeLast类似，，唯一的不同是它把所有的数据项收集到一个List再发射，而不是依次发射一个。
        使用TakeLast操作符修改原始Observable，你可以只发射Observable'发射的后N项数据，忽略前面的数据。

        takeLast( ) — 只发射最后的N项数据
        last( ) — 只发射最后的一项数据
        lastOrDefault( ) — 只发射最后的一项数据，如果Observable为空就发射默认值
        takeLastBuffer( ) — 将最后的N项数据当做单个数据发射
        skip( ) — 跳过开始的N项数据
        skipLast( ) — 跳过最后的N项数据
        take( ) — 只发射开始的N项数据
        first( ) and takeFirst( ) — 只发射第一项数据，或者满足某种条件的第一项数据
        firstOrDefault( ) — 只发射第一项数据，如果Observable为空就发射默认值
        elementAt( ) — 发射第N项数据
        elementAtOrDefault( ) — 发射第N项数据，如果Observable数据少于N项就发射默认值



        Observable.just(1, 2, 3, 4, 5, 6, 7, 8)
                  .take(4)
                  .subscribe(new Subscriber<Integer>() {
                @Override
                public void onNext(Integer item) {
                    System.out.println("Next: " + item);
                }

                @Override
                public void onError(Throwable error) {
                    System.err.println("Error: " + error.getMessage());
                }

                @Override
                public void onCompleted() {
                    System.out.println("Sequence complete.");
                }
            });
            输出

            Next: 1
            Next: 2
            Next: 3
            Next: 4
            Sequence complete.


Distinct操作符
        过滤掉 重复的数据项
        Distinct的过滤规则是：只允许还没有发射过的数据项通过。

        distinctUntilChanged过滤连续重复
        distinctUntilChanged(Func1)
        如下输出1 2 1 2 3 连续1重复过滤

        Observable.just(1, 2, 1, 1, 2, 3)
                  .distinct()
                  .subscribe(new Subscriber<Integer>() {
                @Override
                public void onNext(Integer item) {
                    System.out.println("Next: " + item);
                }

                @Override
                public void onError(Throwable error) {
                    System.err.println("Error: " + error.getMessage());
                }

                @Override
                public void onCompleted() {
                    System.out.println("Sequence complete.");
                }
            });
        输出

        Next: 1
        Next: 2
        Next: 3
        Sequence complete.


        Observable.just(1, 2, 1, 1, 2, 3)
                        .distinct(new Func1<Integer, Object>() {
                            @Override
                            public Object call(Integer integer) {
                            //这个地方是返回 判断是否重复的标志 key  即自定义重复的规则
                                if(integer == 1 || integer == 2){
                                    return 1;
                                }
                                return integer;
                            }
                        })
                        .subscribe(new Subscriber<Integer>() {
                    @Override
                    public void onNext(Integer item) {
                        System.out.println("Next: " + item);
                    }

                    @Override
                    public void onError(Throwable error) {
                        System.err.println("Error: " + error.getMessage());
                    }

                    @Override
                    public void onCompleted() {
                        System.out.println("Sequence complete.");
                    }
                });

                只输出1 3



Merge操作符
无序发送无顺序
Merge可能会让合并的Observables发射的数据交错
你可以将多个Observables的输出合并，就好像它们是一个单个的Observable一样。

/*Observable<Integer> odds = Observable.just(1, 3, 5).subscribeOn(someScheduler);
        Observable<Integer> evens = Observable.just(2, 4, 6);

        Observable.merge(odds, evens)
                .subscribe(new Subscriber<Integer>() {
                    @Override
                    public void onNext(Integer item) {
                        System.out.println("Next: " + item);
                    }

                    @Override
                    public void onError(Throwable error) {
                        System.err.println("Error: " + error.getMessage());
                    }

                    @Override
                    public void onCompleted() {
                        System.out.println("Sequence complete.");
                    }
                });*/
                Next: 1
                Next: 3
                Next: 5
                Next: 2
                Next: 4
                Next: 6
                Sequence complete.




Zip操作符
返回一个Obversable，
它使用这个函数按顺序结合两个或多个Observables发射的数据项，
然后它发射这个函数返回的结果。它按照严格的顺序应用这个函数。
它只发射与发射数据项最少的那个Observable一样多的数据。

Observable<Integer> observable1 = Observable.just(10,20,30);
        Observable<Integer> observable2 = Observable.just(4, 8, 12, 16);
        Observable.zip(observable1, observable2, new Func2<Integer, Integer, Integer>() {
            @Override
            public Integer call(Integer integer, Integer integer2) {
                return integer + integer2;
            }
        }).subscribe(new Subscriber<Integer>() {
            @Override
            public void onCompleted() {
                System.out.println("Sequence complete.");
            }

            @Override
            public void onError(Throwable e) {
                System.err.println("Error: " + e.getMessage());
            }

            @Override
            public void onNext(Integer value) {
                System.out.println("Next:" + value);
            }
        });

        运行结果如下：
        Next:14
        Next:28
        Next:42
        Sequence complete.


zipWith操作符
  Observable observable = Observable.create(new Observable.OnSubscribe<String>() {
              @Override
              public void call(Subscriber<? super String> subscriber) {
                  subscriber.onNext("Hello");
                  subscriber.onNext("Hi");
                  subscriber.onNext("Aloha");
                  subscriber.onNext("yeses");
                  subscriber.onNext("nononono");
                  subscriber.onCompleted();
              }

          });
          observable.zipWith(Observable.just(1, 2, 3, 4), new Func2<String,Integer,String>() {
              @Override
              public String call(String o, Integer o2) {

                  return o+o2;
              }
          }).subscribe(new Action1<String>() {
              @Override
              public void call(String o) {
                      Log.e("=====","===="+o);
              }
          });



















作者：冷月
链接：https://www.zhihu.com/question/32209660/answer/63984697
来源：知乎
著作权归作者所有，转载请联系作者获得授权。

创建操作
用于创建Observable的操作符

Create — 通过调用观察者的方法从头创建一个Observable
Defer — 在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable
Empty/Never/Throw — 创建行为受限的特殊Observable
From — 将其它的对象或数据结构转换为Observable
Interval — 创建一个定时发射整数序列的Observable
Just — 将对象或者对象集合转换为一个会发射这些对象的Observable
Range — 创建发射指定范围的整数序列的Observable
Repeat — 创建重复发射特定的数据或数据序列的Observable
Start — 创建发射一个函数的返回值的Observable
Timer — 创建在一个指定的延迟之后发射单个数据的Observable
变换操作
这些操作符可用于对Observable发射的数据进行变换，详细解释可以看每个操作符的文档

Buffer — 缓存，可以简单的理解为缓存，它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个
FlatMap — 扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。
GroupBy — 分组，将原来的Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据
Map — 映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项
Scan — 扫描，对Observable发射的每一项数据应用一个函数，然后按顺序依次发射这些值
Window — 窗口，定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项。类似于Buffer，但Buffer发射的是数据，Window发射的是Observable，每一个Observable发射原始Observable的数据的一个子集
过滤操作
这些操作符用于从Observable发射的数据中进行选择

Debounce — 只有在空闲了一段时间后才发射数据，通俗的说，就是如果一段时间没有操作，就执行一次操作
Distinct — 去重，过滤掉重复数据项
ElementAt — 取值，取特定位置的数据项
Filter — 过滤，过滤掉没有通过谓词测试的数据项，只发射通过测试的
First — 首项，只发射满足条件的第一条数据
IgnoreElements — 忽略所有的数据，只保留终止通知(onError或onCompleted)
Last — 末项，只发射最后一条数据
Sample — 取样，定期发射最新的数据，等于是数据抽样，有的实现里叫ThrottleFirst
Skip — 跳过前面的若干项数据
SkipLast — 跳过后面的若干项数据
Take — 只保留前面的若干项数据
TakeLast — 只保留后面的若干项数据
组合操作
组合操作符用于将多个Observable组合成一个单一的Observable

And/Then/When — 通过模式(And条件)和计划(Then次序)组合两个或多个Observable发射的数据集
CombineLatest — 当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果
Join — 无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射
Merge — 将两个Observable发射的数据组合并成一个
StartWith — 在发射原来的Observable的数据序列之前，先发射一个指定的数据序列或数据项
Switch — 将一个发射Observable序列的Observable转换为这样一个Observable：它逐个发射那些Observable最近发射的数据
Zip — 打包，使用一个指定的函数将多个Observable发射的数据组合在一起，然后将这个函数的结果作为单项数据发射
错误处理
这些操作符用于从错误通知中恢复

Catch — 捕获，继续序列操作，将错误替换为正常的数据，从onError通知中恢复
Retry — 重试，如果Observable发射了一个错误通知，重新订阅它，期待它正常终止
辅助操作
一组用于处理Observable的操作符

Delay — 延迟一段时间发射结果数据
Do — 注册一个动作占用一些Observable的生命周期事件，相当于Mock某个操作
Materialize/Dematerialize — 将发射的数据和通知都当做数据发射，或者反过来
ObserveOn — 指定观察者观察Observable的调度程序（工作线程）
Serialize — 强制Observable按次序发射数据并且功能是有效的
Subscribe — 收到Observable发射的数据和通知后执行的操作
SubscribeOn — 指定Observable应该在哪个调度程序上执行
TimeInterval — 将一个Observable转换为发射两个数据之间所耗费时间的Observable
Timeout — 添加超时机制，如果过了指定的一段时间没有发射数据，就发射一个错误通知
Timestamp — 给Observable发射的每个数据项添加一个时间戳
Using — 创建一个只在Observable的生命周期内存在的一次性资源
条件和布尔操作
这些操作符可用于单个或多个数据项，也可用于Observable

All — 判断Observable发射的所有的数据项是否都满足某个条件
Amb — 给定多个Observable，只让第一个发射数据的Observable发射全部数据
Contains — 判断Observable是否会发射一个指定的数据项
DefaultIfEmpty — 发射来自原始Observable的数据，如果原始Observable没有发射数据，就发射一个默认数据
SequenceEqual — 判断两个Observable是否按相同的数据序列
SkipUntil — 丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据
SkipWhile — 丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable剩余的数据
TakeUntil — 发射来自原始Observable的数据，直到第二个Observable发射了一个数据或一个通知
TakeWhile — 发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据
算术和聚合操作
这些操作符可用于整个数据序列

Average — 计算Observable发射的数据序列的平均值，然后发射这个结果
Concat — 不交错的连接多个Observable的数据
Count — 计算Observable发射的数据个数，然后发射这个结果
Max — 计算并发射数据序列的最大值
Min — 计算并发射数据序列的最小值
Reduce — 按顺序对数据序列的每一个应用某个函数，然后返回这个值
Sum — 计算并发射数据序列的和
连接操作
一些有精确可控的订阅行为的特殊Observable

Connect — 指示一个可连接的Observable开始发射数据给订阅者
Publish — 将一个普通的Observable转换为可连接的
RefCount — 使一个可连接的Observable表现得像一个普通的Observable
Replay — 确保所有的观察者收到同样的数据序列，即使他们在Observable开始发射数据之后才订阅
转换操作
To — 将Observable转换为其它的对象或数据结构
Blocking 阻塞Observable的操作符
操作符决策树
几种主要的需求

直接创建一个Observable（创建操作）
组合多个Observable（组合操作）
对Observable发射的数据执行变换操作（变换操作）
从Observable发射的数据中取特定的值（过滤操作）
转发Observable的部分值（条件/布尔/过滤操作）
对Observable发射的数据序列求值（算术/聚合操作）

详情：RxJava操作符分类